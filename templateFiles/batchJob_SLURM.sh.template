#!/bin/bash -login
#SBATCH --kill-on-invalid-dep=yes
#SBATCH --ntasks=?NODES?
#SBATCH --nodes=?NODES?
#SBATCH --cpus-per-task=?PPN?
#SBATCH --time=?HOURS?:?MINUTES?:00
#SBATCH --mem=?MEMORY?G
#SBATCH --job-name=?NAME?
#SBATCH --mail-user=?MAILADDRESS?
#SBATCH --mail-type=?MAILTYPE?
#SBATCH --partition=?QUEUE?
#SBATCH --no-requeue

# load the relevant modules
module load GCCcore/.8.3.0 FFmpeg/.4.2.1
module load ?MATVERSION?

# change to work dir:
cd ?WORKDIR?

# log file name
LOGFILE=$(echo $SLURM_JOB_ID | cut -d"." -f1).log

# back up the job log file (if existing due to previous NODE_FAIL)
if [[ -f $LOGFILE ]]; then
  mv "$LOGFILE" "${LOGFILE}_backup_`date '+%Y%m%d_%H%M%S'`"
fi

# use the Job id as environment variable (to use it inside the Matlab log)
export JOBID=$SLURM_JOB_ID

# change home directory to avoid file access problems on the Matlab profile directory when trying to open a parallel pool
# do not use temporary directory to keep log files in case of crash
TMPHOME=$BIGWORK/JOBHOMES/$JOBID
mkdir -p $TMPHOME

# show which computer the job ran on
echo "Job runs on:" $(hostname) > $LOGFILE
echo "Working directory:" $(pwd) > $LOGFILE
while true; do
echo "Start: `date`" >> $LOGFILE
echo "Run ?MATFILE? using Matlab" >> $LOGFILE
(export HOME=$TMPHOME && matlab -nodesktop < ?MATFILE? >> $LOGFILE 2>&1)
echo "Matlab script finished with code $?" >> $LOGFILE
echo "End: `date`" >> $LOGFILE
# look into the log and check for filesystem-related reasons for abortion
# These errors seem not to be able to be catched from within matlab
if [[ `grep "fl:filesystem:PathNotFound" $LOGFILE | wc -l` -gt 0 ]]; then
  echo "Error fl:filesystem:PathNotFound seems to have occured. Retry computation" >> $LOGFILE
  sleep 60
  continue
fi
break
done
gzip $LOGFILE
